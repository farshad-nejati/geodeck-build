import d,{useEffect as g,useState as M}from"https://cdn.skypack.dev/react";import m from"https://cdn.skypack.dev/lodash";import{message as E}from"https://cdn.skypack.dev/antd";import B from"./plot-card.js";import F from"./plot-new.js";import{useMutation as W,useQuery as Q,useReactiveVar as O}from"https://cdn.skypack.dev/@apollo/client";import{GET_PLOTS as z}from"../../apollo/queries/index.js";import{activeProjectVar as H,containersVar as w,plotsVar as r}from"../../apollo/cache.js";import{getPlotsData as J}from"../../data/plots-data.js";import{CONTAINER_STATE as K,PLOT_STATE as X}from"../../apollo/initial-states.js";import*as s from"../../helpers/plot.js";import*as Y from"../../helpers/container.js";import*as y from"../../helpers/geo-object.js";import*as Z from"../../helpers/geo-variable.js";import $ from"../auto-save.js";import tt from"../hooks/use-undo.js";import"../../helpers/store-handler.js";import{UPDATE_PLOT as et}from"../../apollo/mutations/index.js";const ot=()=>{const T=H(),{plots:n,active:v}=O(r),{containers:j,active:u}=O(w),[k,b]=M(n),S=s.getAsArray(n),[L,{set:I,reset:st,undo:at,redo:nt,canUndo:ct,canRedo:rt}]=tt(n),{loading:it,error:lt,data:dt}=Q(z,{variables:{projectId:T.id},onCompleted:e=>{const t=e?.plotModel;h(t)},onError:()=>{const t=J()?.plotModel;h(t)}}),[C]=W(et,{onCompleted:e=>{E.success({content:"saved successfull!",key:"save-plot",duration:1})}});g(()=>{I(n)},[n]);const h=e=>{const t=e?.items,o=s.create(t);r({plots:o})};g(()=>{const e=A(),t=s.update(v,e),o=s.updateList(n,t);r({plots:o,active:t})},[u]);const _=e=>{let{newActive:t,newItems:o}=s.changeActive(n,v,e);const a=A();t=s.update(t,a),o=s.updateList(o,t),r({plots:o,active:t})},A=()=>{const e=Y.findSelected(j),{variables:t,activeVariable:o}=u,a=y.findSelected(e),{points:c,lines:l}=y.getDevided(a),i=Z.findByName(t,o);return{variableObjects:a,variable:i,points:c,lines:l}},V=e=>{const t=s.deletePlot(n,e);r({plots:t,active:X})},x=(e,t)=>{const o=s.findById(n,e),a=s.update(o,t),c=s.updateList(n,a);r({plots:c,active:a})},N=e=>{const t=s.updateList(n,e),{newActive:o,newItems:a}=s.changeActive(t,v,e.id);w({containers:j,active:K}),r({plots:a,active:o})},U=(e,t)=>{const o=s.removeTemps(n,e,t),a=s.update(e,{isActive:!0}),c=s.updateList(o,a);r({plots:c,active:a})},D=e=>{const{plotsState:t,lastSaved:o}=e,{present:a}=t,c=s.removeActiveState(o),l=s.removeActiveState(a),i=m.differenceWith(l,c,m.isEqual);if(b(a),m.isEqual(l,i)||m.isEmpty(i))return null;const f="save-plot";E.loading({content:"saving...",key:f}),i?.map(p=>{const P=p.id,{variable:R}=p,q=R.id,G=s.extractvariableObjectIds(p?.variableObjects);C({variables:{plotId:P,object:{variableObjectIds:G,variableId:q}}})}),b(a)};return d.createElement(d.Fragment,null,d.createElement("div",{className:"grid__plot plot"},d.createElement(F,{onCreateTemp:N,onOverWriteTemp:U,plotsLength:S?.length}),S?.map((e,t)=>{const{id:o,name:a,isActive:c,type:l,variable:i,variableObjects:f,points:p,lines:P}=e;return d.createElement(B,{key:o,objects:u.isPoint?p:P,id:o,name:a,type:l,variable:i,isActive:c,variableObjects:f,onUpdatePlot:x,onSelectPlot:_,onDeletePlot:V})})),d.createElement($,{onSave:D,data:{plotsState:L,lastSaved:k},interval:5e3}))};export default ot;
